// Generated by CoffeeScript 1.6.2
var Collection, CollectionProjection, extend, toArray, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Collection = require('backbone').Collection;

_ref = require('underscore'), toArray = _ref.toArray, extend = _ref.extend;

CollectionProjection = (function(_super) {
  __extends(CollectionProjection, _super);

  function CollectionProjection() {
    _ref1 = CollectionProjection.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  return CollectionProjection;

})(Collection);

exports.CappedCollection = (function(_super) {
  __extends(CappedCollection, _super);

  function CappedCollection(underlying, options) {
    var _this = this;

    if (options == null) {
      options = {};
    }
    this.underlying = underlying;
    this.model = underlying.model;
    this.comparator = options.comparator;
    this.options = extend({
      cap: 5
    }, underlying.options, options);
    CappedCollection.__super__.constructor.call(this, this._capped(this.underlying.models), options);
    this.listenTo(this.underlying, {
      reset: function() {
        return _this.reset(_this._capped(_this.underlying.models));
      },
      remove: function(model) {
        var capped;

        if (_this.contains(model)) {
          _this.remove(model);
          if (_this.comparator) {
            capped = _this._capped(_this.underlying.models);
            return _this.add(capped[_this.options.cap - 1]);
          } else {
            return _this.add(_this.underlying.at(_this.options.cap - 1));
          }
        }
      },
      add: function(model) {
        if (_this.length < _this.options.cap) {
          if (_this.comparator) {
            return _this.add(model);
          } else {
            return _this.add(model, {
              at: _this.underlying.indexOf(model)
            });
          }
        } else {
          if (_this.comparator) {
            if (_this.comparator(model) < _this.comparator(_this.last())) {
              _this.add(model);
              return _this.remove(_this.at(_this.options.cap));
            }
          } else {
            _this.add(model, {
              at: _this.underlying.indexOf(model)
            });
            return _this.remove(_this.at(_this.options.cap));
          }
        }
      }
    });
  }

  CappedCollection.prototype._capped = function(models) {
    var _this = this;

    models = toArray(models);
    if (this.comparator) {
      models.sort(function(a, b) {
        a = _this.comparator(a);
        b = _this.comparator(b);
        if (a > b) {
          return 1;
        } else if (a < b) {
          return -1;
        } else {
          return 0;
        }
      });
    }
    return models.slice(0, this.options.cap);
  };

  CappedCollection.prototype.resize = function(cap) {
    var capped, idx, model, _i, _ref2, _results;

    if (this.options.cap > cap) {
      this.options.cap = cap;
      _ref2 = this.models;
      _results = [];
      for (idx = _i = _ref2.length - 1; _i >= 0; idx = _i += -1) {
        model = _ref2[idx];
        if (idx < cap) {
          break;
        }
        _results.push(this.remove(model));
      }
      return _results;
    } else if (this.options.cap < cap) {
      this.options.cap = cap;
      if (this.comparator) {
        capped = this._capped(this.underlying.models);
        return this.add(capped.slice(this.length, this.options.cap));
      } else {
        return this.add(this.underlying.models.slice(this.length, this.options.cap));
      }
    }
  };

  return CappedCollection;

})(CollectionProjection);
